/*:
 # Lista 7: Algoritmos e Refatora√ß√£o - Parte 2
 -------
 
 * Callout(Dicas r√°pidas / thumb rules):*
     *Aplique as que forem poss√≠veis*

     1. Idente o c√≥digo.
 
     2. Espace o c√≥digo. H√° quebras de linha que facilitam a leitura?
 
     3. Entenda o que o c√≥digo tenta fazer.
 
     4. Renomeie vari√°veis para legibilidade.
 
     5. H√° fun√ß√µes que poderiam virar mais de uma? Refatore para cada fun√ß√£o ter uma responsabilidade clara.
 
     6. H√° c√≥digo fora de fun√ß√µes? Transforme em uma ou mais fun√ß√µes, para facilitar legibilidade, generaliza√ß√£o e reuso.
 
     7. H√° c√≥digo duplicado? Provavelmente pode virar fun√ß√µes.
 
     08. √â poss√≠vel criar/extrair vari√°veis que s√£o reusadas em m√∫ltiplas partes do c√≥digo? Se sim, crie/extraia.
     09. H√° ```var``` que poderia ser ```let```?
     10. H√° c√≥digo que pode ser simplificado? Simplifique.
     
 -------
 ## 1. Continue a somar... [üêùüêù]
 ### Desafio

 Fazer um programa que solicita uma quantidade "n" de n√∫meros naturais positivos a serem digitados e, em seguida, solicita a digita√ß√£o desses "n" n√∫meros. A sa√≠da do programa deve ser a soma de todas as combina√ß√µes √∫nicas¬†poss√≠veis destes n√∫meros, dois a dois.

 **Exemplo 1:**¬†se a entrada for dada por 3 n√∫mero: 2, 3 e 4, a sa√≠da dever√° ser a soma: 23 + 24 + 32 + 34 + 42 + 43 = 198

 ```
 Entrada: [2, 3, 4]

 Sa√≠da:
 198
 ```

 **Exemplo 2:**¬†se a entrada for dada por 3 n√∫mero: 2, 2 e 4, a sa√≠da dever√° ser a soma: 22 + 24 + 42 = 88

 ```
 Entrada: [2, 2, 4]
 Sa√≠da:
 88
 ```

 ### Solu√ß√£o Para Refatorar

 ```swift
 func keepSumming(_ array: [Int]) {
   var pairs : [Int] = []
   var arraySize = array.count
   for i in 0..<arraySize {
 for j in 0..<arraySize {
  if i != j {
         var pair = array[i] * 10 + array[j]
         pairs.append(pair)
 }
   }
 }
   pairs = Array(Set(pairs))
   var sum = 0
   for i in pairs {
     sum += i}
   print(sum)
               }
 ```
 */
// c√≥digo aqui

/*:## 2. Dupla Din√¢mica [üêùüêù]
 ### Desafio
 Dada uma lista¬†de n√∫meros inteiros distintos, conte o n√∫mero de pares de inteiros nos quais a diferen√ßa, em m√≥dulo, seja igual ao n√∫mero **K** informado.

 ### **Formato de entrada**

 Lista de n√∫meros inteiros¬†e¬†K

 ### **Formato de sa√≠da**

 Um inteiro que representa o n√∫mero de pares de inteiros com diferen√ßa igual a¬†**K**¬†contidos na lista.

 ---

 **Exemplo de entrada**

 ```
 listaNum = [1, 5, 3, 4, 2]
 k = 2
 ```

 **Exemplo de sa√≠da**

 ```
 3

 ```

 **Explana√ß√£o do exemplo**

 temos uma lista de 5 inteiros e queremos encontrar os pares entre eles cuja diferen√ßa seja¬†**K**¬†= 2

 Na lista dada na segunda linha temos 3 pares que satisfazem esta condi√ß√£o: (1,3), (5,3) e (4,2). Por este motivo, a sa√≠da √© 3. Vale ressaltar novamente que o¬†*m√≥dulo*¬†da diferen√ßa est√° sendo considerado.

 ---

 ### Solu√ß√£o Para Refatorar

 ```swift
 func contaDuplas(lista: [Int], k: Int) -> Int {

 var c = 0

 for i in 0..<lista.count - 1 {
 for j in i + 1..<lista.count {
 if abs(lista[i] - lista[j]) == k {
 c = c + 1
 }
 }
 }
 return c
 }
 ```
 */
// c√≥digo aqui

/*:## 3. A espi√£ e a mensagem secreta [üêùüêù]
 ### Desafio
 Uma espi√£ precisa gerar um algoritmo de criptografia para se comunicar com seus superiores: dada uma mensagem (apenas em letras mai√∫sculas e sem acento) e um n√∫mero inteiro¬†**n**¬†positivo, trocar cada letra da mensagem pela letra que est√°¬†*n*¬†posi√ß√µes a sua frente. Trate isso de forma circular: se tivermos a letra 'Z' e n = 1, a letra de troca deveria ser 'A' e , caso n = 2, ¬†'B'.

 ### **Formato de entrada**

 Um arquivo texto com 2 linhas: a primeira cont√©m o n√∫mero n e segunda, a mensagem a ser criptografada.

 A mensagem deve conter no m√°ximo 1000 caracteres, todos em mai√∫sculas e sem acentos.

 **Obs**: Eventualmente a entrada pode conter erros.

 ### **Formato de sa√≠da**

 Escrever a mensagem de sa√≠da criptografada, de acordo com a entrada. No caso de algum erro no arquivo de entrada, a sa√≠da deve ser a string "ERRO" (sem aspas).¬†**A sa√≠da n√£o deve conter espa√ßos antes ou depois do valor da resposta!**

 ### **Restri√ß√µes**

 - O n√∫mero n deve ser um inteiro positivo at√© o tamanho do alfabeto (0 <= n <= 26).
 - O tamanho da mensagem de entrada √©, no m√°ximo, 1000 caracteres.

 **Exemplo de Entrada 1**

 ```
 2
 ABAZ
 ```

 **Exemplo de Sa√≠da 1**

 ```
 CDCB
 ```

 **Exemplo de Entrada 2**

 ```
 4
 CESAR
 ```

 **Exemplo de Sa√≠da 2**

 ```
 GIWEV
 ```

 **Explica√ß√£o dos exemplos**

 No primeiro exemplo, deslocam-se todas as letras 2 posi√ß√µes, como 'Z' √© a √∫ltima letra, temos que considerar o alfabeto como circular e trocar Z pela segunda letra que o sucede (Z, A,¬†**B**).

 No segundo exemplo as letras s√£o trocadas pelas letras que as sucedem de 4 posi√ß√µes.

 ### Solu√ß√£o para Refatorar

 ```swift
 let n = 4
 var m = "ABCDE"
 var a = ["a".uppercased(),"b".uppercased(),"c".uppercased(),"d".uppercased(),"e".uppercased(),"f".uppercased(),"g".uppercased(),"h".uppercased(),"i".uppercased(),"j".uppercased(),"k".uppercased(),"l".uppercased(),"m".uppercased(),"n".uppercased(),"o".uppercased(),"p".uppercased(),"q".uppercased(),"r".uppercased(),"s".uppercased(),"t".uppercased(),"u".uppercased(),"v".uppercased(),"w".uppercased(),"x".uppercased(),"y".uppercased(),"z".uppercased()]
 var shifteda5 = a

 for _ in (1...n)
  {
     let a = shifteda.removeFirst()
     shifteda.append(a)
         }

 var dec0Ded = ""
 for i in m {
     let idX = a.firstIndex(of: String(i))!
     dec0Ded += shifteda[idX]
         }
     
 print(dec0Ded)
 ```
 */
// c√≥digo aqui

/*:## 4. Copa Pistola [üêùüêù]
 ### Desafio
 Rel√¢mpago Marc√£o, corredor automobil√≠stico de primeira, est√° fazendo simula√ß√µes de quantos pr√™mios vai ganhar ao longo de sua carreira -- e tamb√©m fazendo proje√ß√µes para seus amigos.

 O simulador do sr. Rel√¢mpago √© bastante espec√≠fico: dados o nome do corredor, a pot√™ncia, o tipo do carro e os anos de corrida, o simulador devolve o total de pr√™mios previstos ao longo da carreira.

 Algumas regras devem ser seguidas:

 - Se o nome do corredor n√£o √© uma das op√ß√µes v√°lidas, o simulador deve retornar um n√∫mero aleat√≥rio entre 10 e 20 -- o sr. Rel√¢mpago quer ver seus amigos felizes;
 - Se o nome do corredor possu√≠ um n√∫mero, o n√∫mero de pr√™mios deve ser acrescido desse n√∫mero;
 - Existem quatro tipos de carro: `urbano`, `rural`, `corrida` e `empilhadeira`. Para cada um, a f√≥rmula aplicada deve ser diferente:
     - se `urbano`: deve-se acrescer 5 + (n√∫mero de anos * 0.5);
     - se `rural`: deve-se acrescer 0.05 * a pot√™ncia;
     - se `corrida`: deve-se acrescer log2(pot√™ncia) * anos;
     - se `empilhadeira`: deve-se acrescer 200.
 - Al√©m disso, as seguintes regras tem prioridade:
     - se o n√∫mero de anos for maior do que 100, o simulador deve falhar e retornar um n√∫mero negativo;
     - se o carro tiver o nome "Rel√¢mpago Marc√£o", o simulador deve somar 3000 no final.

 Os nomes de corredores conhecidos pelo simulador s√£o:

 - Rel√¢mpago Marc√£o
 - Sully
 - Doutor Hud
 - Filmore 15
 - Guidorizzi
 - Wazowski 5
 - Carro DINOCO
 - Godkong 1
 - Kingzilla 2

 ### Solu√ß√£o Para Refatorar

 ```swift
 enum estilocarro {
     case urbano
     case rural
     case corrida
     case empilhadeira
 }

 func simular(v1: String, v2: Double, pocotos: Double, estilo: estilocarro) -> Int {
     let v2Frac = 10
     if v2 <= Double(v2Frac * v2Frac) {
         if "Rel√¢mpago Marc√£o" == v1
             || "Sully" == v1
             || "Doutor Hud" == v1
             || "Filmore 15" == v1
             || "Guidorizzi" == v1
             || "Wazowski 5" == v1
             || "Carro DINOCO" == v1
             || "Godkong 1" == v1
             || "Kingzilla 2" == v1 {
             
             var nameawards = Int(v1.filter({ $0.isNumber }).description) ?? 0
             
             var cartypeawards = 0
             switch estilo {
             case .urbano:
                 cartypeawards += (2 + 3) + Int(v2 * (5 * 0.1))
             case .rural:
                 cartypeawards += Int(0.05 * pocotos)
             case .corrida:
                 cartypeawards += Int(log2(pocotos) * v2)
             case .empilhadeira:
                 cartypeawards += (100 * 2)
             }
             
             if v1 != "Rel√¢mpago Marc√£o" {
                 nameawards += 0
             } else {
                 nameawards += 3000
             }
             return nameawards + cartypeawards
         } else {
             return Int.random(in: 10...20)
         }
     } else {
         return -145123
     }
 }
 ```
 */
// c√≥digo aqui

/*:## 5. Valida√ß√£o de CPF [üêùüêùüêù]
 ### Desafio
 Esse c√≥digo abaixo valida se um CPF √© v√°lido ou n√£o.

 As regras para validar um CPF pode ser encontrada aqui

 [https://dicasdeprogramacao.com.br/algoritmo-para-validar-cpf/](https://dicasdeprogramacao.com.br/algoritmo-para-validar-cpf/)

### Solu√ß√£o para Refatorar
 ```swift
 // Valida√ß√£o de CPF
 func validaCPF(cpf: String) -> Bool {
     let l = cpf.filter({ c in c.isNumber })
     let i = l.startIndex
     let u77 = 5
     let u75 = 3
     let u81 = 2
     let ns = l[l.index(i, offsetBy: u77 - u75 - u81)..<l.index(i, offsetBy: (u75 * 4) - u81 - 1)]
     var u = 0
     var p22 = 10
     for n in ns {
     if let nInt = Int(n.description) {
         u += (nInt * p22)
         p22 -= 1
     }
     }
     let ratio = ((u * 10) % 11) % 10
     let valid = l[l.index(i, offsetBy: 9)..<l.index(i, offsetBy: 11)]
     if Int(valid.first?.description ?? "") != nil, Int(valid.first?.description ?? "") == ratio {
         let pedaco = l[l.index(i, offsetBy: 0)..<l.index(i, offsetBy: 10)]
         var u2 = 0
         var p21 = 11
     for n in pedaco {
          if let nInt = Int(n.description) {
          u2 += (nInt * p21)
           p21 -= 1
     }
         }
         let prop = ((u2 * 10) % 11) % 10
         if Int(valid.last?.description ?? "") != nil, Int(valid.last?.description ?? "") == prop {
         return true
         }
         return false
     }
     return false
 }

 print(validaCPF(cpf: "529.982.247-25")) // True
 print(validaCPF(cpf: "123.456.789-10")) // False
 print(validaCPF(cpf: "496.055.962-45")) // True
 print(validaCPF(cpf: "933.524.623-99")) // True
 print(validaCPF(cpf: "640.128.790-06")) // True
 print(validaCPF(cpf: "444.333.111-43")) // False
 print(validaCPF(cpf: "333.222.456-15")) // False
 ```
 
 */
// c√≥digo aqui

